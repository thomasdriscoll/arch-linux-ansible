---
- name: Set up LVM with dm-crypt
  hosts: localhost
  gather_facts: true
  become: yes

  vars_files:
    - ../variables/bootstrap-vars.yml
    - ../variables/pacstrap-packages.yml

  tasks:
    - name: Gather disk facts
      setup:

    # manually set the list of devices
    - name: initialize list for devices
      set_fact:
        storage_devices:
          - /dev/sda
      no_log: true

    - name: Name all the partitions
      set_fact:
        partitions:
          - /dev/sda1
          - /dev/sda2


    - name: Create boot partition
      parted:
        device: "{{ storage_devices[0] }}"
        number: 1
        state: present
        part_end: "{{ boot_partition_size }}"
        part_start: 1MiB

    - name: Create partition on boot disk
      parted:
        device: "{{ storage_devices[0] }}"
        number: 2
        state: present
        part_end: "100%"
        part_start: "{{ boot_partition_size }}"

    - name: Create remaining partitions
      parted:
        device: "{{ item }}"
        number: 1
        state: present
        part_end: "100%"
        part_start: 1MiB
      loop: "{{ storage_devices[1:] }}"

    - name: Create physical volumes
      command: pvcreate "{{ item }}"
      become: true
      become_user: root
      loop: "{{ partitions[1:] }}"
      register: pvcreate_output

    - name: Extract physical volume names
      set_fact:
        vg_physical_volumes: "{{ item.item }}"
      loop: "{{ pvcreate_output.results }}"

    - name: Create volume group
      lvg:
        vg: "{{ vg_name }}"
        pvs: "{{ vg_physical_volumes }}"
      become: true
      become_user: root

    - name: Create logical volume for root
      # Create a logical volume within the volume group
      lvol:
        vg: "{{ vg_name }}"
        lv: "{{ item.name }}"
        size: "{{ item.size }}"
      with_items:
        - { name: "{{ root_lv }}", size: "{{ root_lv_size }}" }
        - { name: "{{ swap_lv }}", size: "{{ swap_lv_size }}" }
        - { name: "{{ tmp_lv }}", size: "{{ tmp_lv_size }}" }
        - { name: "{{ home_lv }}", size: "{{ home_lv_size }}" }

    - name: set up and open dm-crypt on root volume
      community.crypto.luks_device:
        name: "{{ root_decrypt_name }}"
        state: opened
        device: "/dev/{{ vg_name }}/{{ root_lv }}"
        cipher: aes-xts-plain64
        passphrase: "{{ root_device_password }}"
      become: true
      become_user: root

    - name: create encrypted filesystem
      # create a filesystem on the encrypted volume
      filesystem:
        fstype: ext4  # replace with the desired filesystem type (e.g., ext4, xfs, etc.)
        dev: "{{ root_device }}"

    - name: zero out the boot partition
      command: dd if=/dev/zero of="{{ partitions[0] }}" bs=1M count=299 status=progress
      become: true
      become_user: root

    - name: Format partition as FAT32
      filesystem:
        fstype: vfat
        dev: "{{ partitions[0] }}"

    - name: run reflector
      ansible.builtin.shell: reflector --country us --age 12 --protocol https --sort rate --save /etc/pacman.d/mirrorlist
      become: true
      become_user: root

### mounting
    - name: mount encrypted filesystem
      # mount the encrypted filesystem to the specified mount path
      mount:
        path: /mnt  # replace with the desired mount path
        src: "{{ root_device }}"
        fstype: ext4  # replace with the desired filesystem type
        state: mounted

    - name: create mount point
      file:
        path: /mnt/boot
        state: directory
      become: true
      become_user: root

    - name: Mount boot partition
      mount:
        path: /mnt/boot
        src: "{{ partitions[0] }}"
        fstype: vfat
        state: mounted
      become: true
      become_user: root

    - name: Determine microcode update package
      set_fact:
        microcode_package: "{{ 'amd-ucode' if ansible_processor[0] == 'AMD' else 'intel-ucode' }}"

    - name: Install packages using pacstrap
      ansible.builtin.shell: "pacstrap /mnt {{ pacstrap_packages | join(' ') }}"
      become: true
      become_user: root

    - name: generate fstab
      ansible.builtin.template:
        src: ../templates/fstab.j2
        dest: /mnt/etc/fstab
      vars:
        _root_device: "{{ root_device }}"
        _boot_device: "{{ partitions[0] }}"
        _tmp_device: "{{ tmp_device }}"
        _swap_device: "{{ swap_device }}"
        _home_device: "{{ home_device }}"

    - name: generate crypttab
      ansible.builtin.template:
        src: ../templates/crypttab.j2
        dest: /mnt/etc/crypttab
      vars:
        _swap_decrypt_name: "{{ swap_decrypt_name }}"
        _tmp_decrypt_name: "{{ tmp_decrypt_name }}"
        _home_decrypt_name: "{{ home_decrypt_name }}"
        _cryptswap_device: "{{ cryptswap_device }}"
        _crypttmp_device: "{{ crypttmp_device }}"
        _crypthome_device: "{{ crypthome_device }}"

    - name: Set time zone
      command: ln -sf /mnt/usr/share/zoneinfo/America/Chicago /mnt/etc/localtime
      become: true
      become_user: root

    - name: Adjust hwclock
      command: hwclock --systohc
      become: true
      become_user: root

    - name: Uncomment localegen language
      ansible.builtin.lineinfile:
        path: /mnt/etc/locale.gen
        regexp: '^#?(.*en_US\.UTF-8 UTF-8.*)$'
        line: 'en_US.UTF-8 UTF-8'
      become: true
      become_user: root

    - name: Generate locales
      command: arch-chroot /mnt locale-gen
      become: true
      become_user: root

    - name: Create locale.conf
      copy:
        content: "LANG=en_US.UTF-8"
        dest: /mnt/etc/locale.conf
      become: true
      become_user: root

    - name: Set keyboard layout
      copy:
        content: "KEYMAP=us\nXKBLAYOUT=us"
        dest: /mnt/etc/vconsole.conf
      become: true
      become_user: root

    - name: Create hostname
      copy:
        content: "{{ network_name }}"
        dest: /mnt/etc/hostname
      become: true
      become_user: root

    - name: create folder for home passfile
      file:
        path: /mnt/etc/luks-keys
        state: directory
      become: true
      become_user: root

    - name: Put random into home pass file
      command: dd if=/dev/random of=/mnt/etc/luks-keys/home bs=1 count=256 status=progress
      become: true
      become_user: root

    - name: set up and open dm-crypt for home volume
      community.crypto.luks_device:
        name: "{{ home_decrypt_name }}"
        state: opened
        device: "/dev/{{ vg_name }}/{{ home_lv }}"
        cipher: aes-xts-plain64
        keyfile: /mnt/etc/luks-keys/home
      become: true
      become_user: root

    - name: create encrypted filesystem on home partition
      # create a filesystem on the encrypted volume
      filesystem:
        fstype: ext4  # replace with the desired filesystem type (e.g., ext4, xfs, etc.)
        dev: "{{ home_device }}"

    - name: mount encrypted home filesystem
      # mount the encrypted filesystem to the specified mount path
      mount:
        path: /mnt  # replace with the desired mount path
        src: "{{ home_device }}"
        fstype: ext4  # replace with the desired filesystem type
        state: mounted

    - name: configure mkinitcpio
      lineinfile:
        path: "/mnt/etc/mkinitcpio.conf"
        regexp: "^HOOKS=(.*)"
        line: 'HOOKS=({{ item.hooks }})'
      with_items:
        - { hooks: "base systemd autodetect modconf kms keyboard sd-vconsole block sd-encrypt lvm2 filesystems fsck" }
      become: true
      become_user: root

    - name: Run mkinitcpio
      command: arch-chroot /mnt mkinitcpio -P
      become: true
      become_user: root
    # Additional tasks can be added for further configuration or customization
    - name: Get UUID of /dev/mapper/MainVolGroup-cryptroot
      ansible.builtin.command: "blkid -s UUID -o value /dev/mapper/{{ vg_name }}-{{ root_lv }}"
      register: uuid_output

    - name: Create EFI Boot Entry
      ansible.builtin.template:
        src: ../templates/boot_script.j2
        dest: /mnt/boot/efibootmgr_command.sh
        mode: 0755
      vars:
        root_UUID: "{{ uuid_output.stdout }}"
        microcode_package: "{{ microcode_package }}"
        boot_disk: "{{ storage_devices[0] }}"
      become: true
      become_user: root

    - name: Execute the script file
      ansible.builtin.command: arch-chroot /mnt /boot/efibootmgr_command.sh
      become: true
      become_user: root

    - name: Systemd enable apparmor
      ansible.builtin.command: arch-chroot /mnt systemctl enable apparmor
      become: true
      become_user: root

    - name: Set root password
      command: arch-chroot /mnt /bin/bash -c "echo 'root:{{ root_password }}' | chpasswd"
      changed_when: false
      become: true

    - name: Set root shell
      command: arch-chroot /mnt chsh -s /bin/zsh root
      become: true
      become_user: root

    - name: Clone Arch-Linux repo
      git:
        repo: https://github.com/thomasdriscoll/arch-linux-ansible.git
        dest: /mnt/root/arch-linux-ansible
